name: Publish Pull Requests
on:
  pull_request:
  push:
    branches:
      - "**"
    tags:
      - "!**"

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      has-permissions: ${{ steps.checkPermissions.outputs.require-result }}
    steps:
      - name: Check permissions
        id: checkPermissions
        uses: actions-cool/check-user-permission@v2
        with:
          # In this example, the approver must have the write access
          # to the repository to trigger the package preview.
          require: "write"

  publish:
    needs: check
    # Publish the preview package only if the permissions check passed.
    if: needs.check.outputs.has-permissions == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - run: npx pkg-pr-new publish --json output.json --no-template --comment=off
      - name: Post or update comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const output = JSON.parse(fs.readFileSync('output.json', 'utf8'));

            const packages = output.packages
              .map((p) => `- ${p.name}: ${p.url}`)
              .join('\n');

            const sha =
              context.event_name === 'pull_request'
                ? context.payload.pull_request.head.sha
                : context.payload.after;

            const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${sha}`;



            const botCommentIdentifier = '## Custom Publish Message';

            async function findBotComment(issueNumber) {
              if (!issueNumber) return null;
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              return comments.data.find((comment) =>
                comment.body.includes(botCommentIdentifier)
              );
            }

            async function createOrUpdateComment(issueNumber) {
              if (!issueNumber) {
                console.log('No issue number provided. Cannot post or update comment.');
                return;
              }

              const body = `## Try out this PR:

                  npx -y https://pkg.pr.new/git-truck@${issueNumber}

              [View Commit](${commitUrl})`;

              const existingComment = await findBotComment(issueNumber);
              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: body,
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body,
                });
              }
            }

            async function logPublishInfo() {
              console.log('\n' + '='.repeat(50));
              console.log('Publish Information');
              console.log('='.repeat(50));
              console.log('\nPublished Packages:');
              console.log(packages);
              console.log('\nTemplates:');
              console.log(templates);
              console.log(`\nCommit URL: ${commitUrl}`);
              console.log('\n' + '='.repeat(50));
            }

            if (context.eventName === 'pull_request') {
              if (context.issue.number) {
                await createOrUpdateComment(context.issue.number);
              }
            } else if (context.eventName === 'push') {
              const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.ref.replace(
                  'refs/heads/',
                  ''
                )}`,
              });

              if (pullRequests.data.length > 0) {
                await createOrUpdateComment(pullRequests.data[0].number);
              } else {
                console.log(
                  'No open pull request found for this push. Logging publish information to console:'
                );
                await logPublishInfo();
              }
            }
